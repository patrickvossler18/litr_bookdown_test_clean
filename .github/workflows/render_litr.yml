# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    # this should run on any changes to *.Rmd files and any file in source-files
    paths: ['*.Rmd', 'source-files/**']

name: render-litr

jobs:
  render-litr:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2

      - name: Install ubuntu dependencies avoid installation errors
        run: sudo apt-get install libcurl4-openssl-dev libharfbuzz-dev libfribidi-dev
      
      - uses: r-lib/actions/setup-renv@v2
        with: 
          cache-version: 2

      - name: Install litr
        run: renv::install("jacobbien/litr-project:litr@*release")
        shell: Rscript {0}

      - name: Set environment variables
        run: |
          IS_BOOKDOWN=false
          # find doesn't allow capture groups so we'll have to separate searches
          SEARCH_FOR_INDEX=($(find . -maxdepth 1 -type f  -regex '.*index\.[Rr][Mm][Dd]' -exec basename {} \;))
          
          # if SEARCH_FOR_INDEX is not an empty string
          if [[ -n  "$SEARCH_FOR_INDEX" ]]; then
            # if the file name is "index" then we need to look for the package name elsewhere
            # we will look for the *-package.R file and get the package name
            IS_BOOKDOWN=true
            TOP_LEVEL_RMD=$(echo "$SEARCH_FOR_INDEX")
          else
            TOP_LEVEL_RMD=($(find . -maxdepth 1 -type f  -regex '.*create-.*\.[Rr][Mm][Dd]' -exec basename {} \;))
            RMD_FILENAME=${TOP_LEVEL_RMD/.*/}
            PKG_NAME=$(echo "$RMD_FILENAME" | rev | cut -d- -f1 | rev)  
          fi
          
          RMD_PATH=($(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep "$TOP_LEVEL_RMD"))

          # add variables to GH env to access them in the next step
          echo "RMD_PATH=$RMD_PATH" >> $GITHUB_ENV
          echo "RMD_FILENAME=$RMD_FILENAME" >> $GITHUB_ENV
          echo "PKG_NAME=$PKG_NAME" >> $GITHUB_ENV
          echo "TOP_LEVEL_RMD=$TOP_LEVEL_RMD" >> $GITHUB_ENV
          echo "IS_BOOKDOWN=$IS_BOOKDOWN" >> $GITHUB_ENV

      - name: Render Rmarkdown files and Generate Package 
        run: |
          Rscript -e 'for (f in commandArgs(TRUE)) if (file.exists(f)) litr::render(f)' ${RMD_PATH[*]}
          
      - name: Run tests on the knitted package 
        run: |
          # For bookdown, get the package name after everything has been rendered
          if [[ $IS_BOOKDOWN = true ]]; then
            RMD_FILENAME=($(find . -type f -regex '.*-package\.R' -exec basename {} \;))
            PKG_NAME=$(echo "$RMD_FILENAME" | cut -d- -f1 )
            echo "PKG_NAME=$PKG_NAME" >> $GITHUB_ENV
          fi
          Rscript -e 'args = commandArgs(TRUE); pkg_path = paste0(args[1], "/"); devtools::test(pkg_path)' ${PKG_NAME}

      - name: Commit Results
        run: |
          git config --local user.name "$GITHUB_ACTOR"
          git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --local push.autoSetupRemote true
          git fetch --all
          git checkout -B build_output
          # git ls-remote --heads origin build_output | grep build_output >/dev/null
          # if [[ "$?" == "1" ]]; then
          #   git branch -u origin/build_output
          # fi
          if [[ $IS_BOOKDOWN = true ]]; then
            git add ${PKG_NAME}/ _book/ 
          else
            # TODO: check that this won't add the .Rmd file
            git add ${RMD_FILENAME}.* ${PKG_NAME}/
          fi
          git commit -m 'Re-build Litr file and package' || echo "No changes to commit"
          git push -fu origin build_output || echo "No changes to commit"